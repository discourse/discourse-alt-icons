"use strict";

const fs = require("fs");
const feather = require("feather-icons");
const sets = require("./icon-sets.json");
const { parse, stringify } = require("svgson");

let icons = [],
  replacers = [];

let args = process.argv.slice(2);

if (args.length) {
  const id = args[0];
  const set = sets[id];

  init(id, set);
} else {
  for (var id in sets) {
    icons = [];
    replacers = [];
    const set = sets[id];
    init(id, set);
  }
}

async function init(id, set) {
  writeAbout(set);
  await writeSprite(id, set);
  await writeInitializer(set);
  await console.log(`${set.name} updated!`);
}

async function writeSprite(id, set) {
  try {
    const setMappings = JSON.parse(fs.readFileSync(set.mappings));

    for (const discourseIconId in setMappings) {
      const iconId = setMappings[discourseIconId];
      const prefix = `${set.prefix}-`;
      let svg = await _getSvg(id, iconId, set);

      if (svg !== "") {
        if (!icons.includes(svg)) {
          icons.push(svg);
        }
        if (svg !== "") {
          replacers.push(
            `api.replaceIcon("${discourseIconId}", "${prefix}${iconId}");`
          );
        }
      } else {
        console.log(`Match missing in ${id}: ${discourseIconId} => ${iconId} `);
      }
    }

    const sprite = `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  ${icons.join("\n  ")}
</svg>
`;

    fs.writeFile(
      `repos/discourse-${set.name}/assets/icons-sprite.svg`,
      sprite,
      (err) => {
        if (err) {
          console.error(err);
        }
      }
    );
  } catch (err) {
    console.log(err);
  }
}

function writeInitializer(set) {
  const jsContent = `// autogenerated via "yarn run build.js"
import { withPluginApi } from "discourse/lib/plugin-api";

function initIcons(api) {
  ${replacers.join("\n  ")}
}

export default {
  name: "${set.name}",
  initialize() {
    withPluginApi("0.10.1", initIcons);
  },
};

`;

  fs.writeFile(
    `repos/discourse-${set.name}/javascripts/discourse/initializers/${set.name}.js.es6`,
    jsContent,
    (err) => {
      if (err) {
        console.error(err);
        return;
      }
    }
  );
}

function writeAbout(set) {
  const aboutContent = `{
  "name": "discourse-${set.name}",
  "description": "${set.description}",
  "about_url": null,
  "license_url": null,
  "component": true,
  "assets": {
    "icons-sprite": "/assets/icons-sprite.svg"
  }
}
`;

  fs.writeFile(
    `repos/discourse-${set.name}/about.json`,
    aboutContent,
    (err) => {
      if (err) {
        console.error(err);
        return;
      }
    }
  );
}

async function _getSvg(setId, iconId, setMetadata) {
  let svg = "";

  const iconFilename = setMetadata["icon-suffix"]
    ? `${iconId}-${setMetadata["icon-suffix"]}`
    : iconId;

  switch (setId) {
    case "feather":
      svg = feather.icons[iconFilename].toSvg();
      svg = svg.replace('width="24" ', "");
      svg = svg.replace('height="24" ', "");
      break;
    default:
      try {
        svg = fs.readFileSync(
          `${setMetadata.icons}/${iconFilename}.svg`,
          "utf8"
        );
      } catch (err) {}
      break;
  }

  return parse(svg).then((sObj) => {
    sObj.attributes["id"] = `${setMetadata.prefix}-${iconId}`;
    // sObj.attributes["class"] = `${setMetadata.prefix}-icon`;

    delete sObj.attributes["xmlns"];
    delete sObj.attributes["data-name"];

    if (sObj.name == "svg") {
      sObj.name = "symbol";
    }

    return stringify(sObj);
  });
}
